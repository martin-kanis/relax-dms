/* 
 * The MIT License
 *
 * Copyright 2017 mkanis.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.fit.vutbr.relaxdms;

import java.util.List;
import org.fit.vutbr.relaxdms.data.db.dao.model.workflow.Environment;
import org.fit.vutbr.relaxdms.data.db.dao.model.Document;
import org.fit.vutbr.relaxdms.data.db.dao.model.workflow.Workflow;
import org.fit.vutbr.relaxdms.data.db.dao.model.workflow.State;
import org.fit.vutbr.relaxdms.data.db.dao.model.workflow.ApprovalEnum;
import org.fit.vutbr.relaxdms.data.db.dao.model.workflow.StateEnum;
import org.fit.vutbr.relaxdms.data.db.dao.model.workflow.LabelEnum;
import org.fit.vutbr.relaxdms.data.db.dao.model.workflow.Label;

global java.util.Set docSet;

dialect "java"

rule "Submit"
    when
        $env : Environment(isTrue() == true, getAssignTo() != null, $assignTo : getAssignTo())
        $document : Document(workflow.state.currentState != StateEnum.SUBMITTED && 
            (workflow.state.currentState == StateEnum.OPEN || 
            workflow.state.currentState == StateEnum.IN_PROGRESS))
    then
        modify($document) {
            getWorkflow().getState().setCurrentState(StateEnum.SUBMITTED),
            getWorkflow().getAssignment().setAssignee($assignTo)
        };
        modify($env) {
            setValue(false)
        };
        System.out.println("Submit rule fired");
end

rule "Approve"
    when
        $document : Document(workflow.state.approval == ApprovalEnum.APPROVED &&
            workflow.state.currentState == StateEnum.SUBMITTED)
    then
        List<String> assigneeList = $document.getWorkflow().getAssignment().getHistory();
        int size = assigneeList.size();
        int index = (size == 1) ? size - 1 : size - 2;
        String assignee = assigneeList.get(index);

        modify($document) {
            getWorkflow().getAssignment().setAssignee(assignee),
            getWorkflow().getState().setCurrentState(StateEnum.DONE)
        };
        System.out.println("Approve rule fired");
end

rule "Decline"
    when
        $document : Document(workflow.state.approval == ApprovalEnum.DECLINED &&
            workflow.state.currentState == StateEnum.SUBMITTED)
    then
        List<String> assigneeList = $document.getWorkflow().getAssignment().getHistory();
        int size = assigneeList.size();
        int index = (size == 1) ? size - 1 : size - 2;
        String assignee = assigneeList.get(index);

        modify($document) {
            getWorkflow().getAssignment().setAssignee(assignee),
            getWorkflow().getState().setCurrentState(StateEnum.OPEN)
        };
        System.out.println("Decline rule fired");
end

rule "Unfreeze"
    when 
        $env : Environment(isTrue() == true)
        $document : Document(workflow.labels.contains(new Label(LabelEnum.FREEZED)))
    then      
        modify($document) {
            getWorkflow().getLabels().remove(new Label(LabelEnum.FREEZED))
        };
        modify($env) {
            setValue(false)
        };
        
        docSet.add($document);
        System.out.println("Unfreeze rule fired");
end

rule "Release"
    when 
        $env : Environment(isTrue() == true, $fireBy : getFireBy())
        $document : Document(workflow.labels.contains(new Label(LabelEnum.SIGNED)) &&
            workflow.labels not contains new Label(LabelEnum.RELEASED))
    then      
        modify($document) {
            getWorkflow().getLabels().add(new Label(LabelEnum.RELEASED, $fireBy))
        };
        modify($env) {
            setValue(false)
        };
        docSet.add($document);
        System.out.println("Release rule fired");
end

query "Document"
    $result: Document()
end